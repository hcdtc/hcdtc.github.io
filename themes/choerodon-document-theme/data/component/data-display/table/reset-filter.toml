id= "table-demo-reset-filter"
weight= 6
name= "可控的筛选和排序"
description= """
使用受控属性对筛选和排序状态进行控制。

> 1. columns 中定义了 filteredValue 和 sortOrder 属性即视为受控模式。
> 2. 只支持同时对一列进行排序，请保证只有一列的 sortOrder 属性是生效的。
> 3. 务必指定 `column.key`。
"""
code= """
````jsx
import { Table, Button } from 'choerodon-ui';

const data = [{
  key: '1',
  name: 'John Brown',
  age: 32,
  address: 'New York No. 1 Lake Park',
}, {
  key: '2',
  name: 'Jim Green',
  age: 42,
  address: 'London No. 1 Lake Park',
}, {
  key: '3',
  name: 'Joe Black',
  age: 32,
  address: 'Sidney No. 1 Lake Park',
}, {
  key: '4',
  name: 'Jim Red',
  age: 32,
  address: 'London No. 2 Lake Park',
}];

function findText(value, filters) {
  const found = filters.find(filter => filter.value === value);
  return found ? found.text : value;
}

class App extends React.Component {
  state = {
    filteredInfo: { name: ['1'], address: ['a'] },
    barFilters: ['No. 1'],
    sortedInfo: null,
  }

  handleChange = (pagination, filters, sorter, barFilters) => {
    console.log('Various parameters', pagination, filters, sorter, barFilters);
    this.setState({
      filteredInfo: filters,
      sortedInfo: sorter,
      barFilters,
    });
  }

  clearFilters = () => {
    this.setState({ filteredInfo: null });
  }

  clearAll = () => {
    this.setState({
      filteredInfo: null,
      sortedInfo: null,
    });
  }

  setAgeSort = () => {
    this.setState({
      sortedInfo: {
        order: 'descend',
        columnKey: 'age',
      },
    });
  }

  render() {
    let { sortedInfo, filteredInfo, barFilters } = this.state;
    sortedInfo = sortedInfo || {};
    filteredInfo = filteredInfo || {};
    barFilters = barFilters || [];
    const columns = [{
      title: 'Name',
      dataIndex: 'name',
      key: 'name',
      filters: [
        { text: 'Joe', value: '1' },
        { text: 'Jim', value: '2' },
      ],
      filteredValue: filteredInfo.name || null,
      onFilter: (value, record, filters) => record.name.includes(findText(value, filters)),
      sorter: (a, b) => a.name.length - b.name.length,
      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,
    }, {
      title: 'Age',
      dataIndex: 'age',
      key: 'age',
      sorter: (a, b) => a.age - b.age,
      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,
    }, {
      title: 'Address',
      dataIndex: 'address',
      key: 'address',
      filters: [
        { text: 'London', value: 'a' },
        { text: 'New York', value: 'b' },
      ],
      filterMultiple: true,
      filteredValue: filteredInfo.address || null,
      onFilter: (value, record, filters) => record.address.includes(findText(value, filters)),
      sorter: (a, b) => a.address.length - b.address.length,
      sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,
    }];
    return (
      <div>
        <div className="table-operations">
          <Button onClick={this.setAgeSort}>Sort age</Button>
          <Button onClick={this.clearFilters}>Clear filters</Button>
          <Button onClick={this.clearAll}>Clear filters and sorters</Button>
        </div>
        <Table columns={columns} dataSource={data} onChange={this.handleChange} filters={barFilters} />
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);
````
"""
script= """
const { Table, Button } = window['choerodon-ui'];

const data = [{
  key: '1',
  name: 'John Brown',
  age: 32,
  address: 'New York No. 1 Lake Park',
}, {
  key: '2',
  name: 'Jim Green',
  age: 42,
  address: 'London No. 1 Lake Park',
}, {
  key: '3',
  name: 'Joe Black',
  age: 32,
  address: 'Sidney No. 1 Lake Park',
}, {
  key: '4',
  name: 'Jim Red',
  age: 32,
  address: 'London No. 2 Lake Park',
}];

function findText(value, filters) {
  const found = filters.find(filter => filter.value === value);
  return found ? found.text : value;
}

class App extends React.Component {
  state = {
    filteredInfo: { name: ['1'], address: ['a'] },
    barFilters: ['No. 1'],
    sortedInfo: null,
  }

  handleChange = (pagination, filters, sorter, barFilters) => {
    console.log('Various parameters', pagination, filters, sorter, barFilters);
    this.setState({
      filteredInfo: filters,
      sortedInfo: sorter,
      barFilters,
    });
  }

  clearFilters = () => {
    this.setState({ filteredInfo: null });
  }

  clearAll = () => {
    this.setState({
      filteredInfo: null,
      sortedInfo: null,
    });
  }

  setAgeSort = () => {
    this.setState({
      sortedInfo: {
        order: 'descend',
        columnKey: 'age',
      },
    });
  }

  render() {
    let { sortedInfo, filteredInfo, barFilters } = this.state;
    sortedInfo = sortedInfo || {};
    filteredInfo = filteredInfo || {};
    barFilters = barFilters || [];
    const columns = [{
      title: 'Name',
      dataIndex: 'name',
      key: 'name',
      filters: [
        { text: 'Joe', value: '1' },
        { text: 'Jim', value: '2' },
      ],
      filteredValue: filteredInfo.name || null,
      onFilter: (value, record, filters) => record.name.includes(findText(value, filters)),
      sorter: (a, b) => a.name.length - b.name.length,
      sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,
    }, {
      title: 'Age',
      dataIndex: 'age',
      key: 'age',
      sorter: (a, b) => a.age - b.age,
      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,
    }, {
      title: 'Address',
      dataIndex: 'address',
      key: 'address',
      filters: [
        { text: 'London', value: 'a' },
        { text: 'New York', value: 'b' },
      ],
      filterMultiple: true,
      filteredValue: filteredInfo.address || null,
      onFilter: (value, record, filters) => record.address.includes(findText(value, filters)),
      sorter: (a, b) => a.address.length - b.address.length,
      sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,
    }];
    return (
      <div>
        <div className="table-operations">
          <Button onClick={this.setAgeSort}>Sort age</Button>
          <Button onClick={this.clearFilters}>Clear filters</Button>
          <Button onClick={this.clearAll}>Clear filters and sorters</Button>
        </div>
        <Table columns={columns} dataSource={data} onChange={this.handleChange} filters={barFilters} />
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('table-demo-reset-filter'));
"""